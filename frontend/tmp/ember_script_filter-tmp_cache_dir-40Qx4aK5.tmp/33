// Generated by EmberScript 0.0.14
var Spree;
var get$ = Ember.get;
var set$ = Ember.set;
Spree = Ember.Object.extend(Ember.Evented, {
  key: 'spree_ember',
  orderToken: null,
  orderId: null,
  init: function () {
    return this.restore(this.localStorageData());
  },
  persist: function (data) {
    this.restore(data);
    data = JSON.stringify(data || {});
    return localStorage.setItem(get$(this, 'key'), data);
  },
  restore: function (data) {
    var key, value;
    return function (accum$) {
      for (key in data) {
        value = data[key];
        accum$.push(this.set(key, value));
      }
      return accum$;
    }.call(this, []);
  },
  localStorageData: function () {
    var data;
    data = localStorage.getItem(get$(this, 'key'));
    return JSON.parse(data || '{}');
  },
  clear: function () {
    return localStorage.removeItem(get$(this, 'key'));
  },
  clearCurrentOrder: function () {
    return set$(this, 'orderId', null);
  },
  currentOrder: Ember.computed(function () {
    if (get$(this, 'orderId'))
      return get$(this, 'store').find('order', get$(this, 'orderId'));
  }).property('orderId'),
  currentOrderCanAdvance: Ember.computed(function () {
    switch (get$(get$(this, 'currentOrder'), 'state')) {
    case 'cart':
      return true;
    case 'address':
      return get$(get$(this, 'currentOrder'), 'shipAddress') && get$(get$(this, 'currentOrder'), 'billAddress');
    case 'delivery':
      return false;
    case 'payment':
      return false;
    case 'confirm':
      return true;
    case 'complete':
      return false;
    }
  }).property('currentOrder.state'),
  advanceOrderState: function () {
    if (get$(this, 'currentOrderCanAdvance')) {
      return get$(this, 'applicationAdapter').ajax(get$(this, 'nextURL'), 'PUT').then(function (this$) {
        return function (order) {
          get$(this$, 'store').pushPayload(order);
          return this$.trigger('spreeOrderDidAdvance');
        };
      }(this), function (this$) {
        return function (error) {
          return this$.trigger('spreeOrderDidNotAdvance', error);
        };
      }(this));
    } else {
      return this.trigger('spreeOrderCanNotAdvance');
    }
  },
  saveCurrentOrder: function () {
    return get$(get$(this, 'currentOrder'), 'content').save().then(function (order) {
      debugger;
    }, function (error) {
      debugger;
    });
  },
  applicationAdapter: Ember.computed(function () {
    return get$(this, 'container').lookup('adapter:application');
  }).property('container'),
  nextURL: Ember.computed(function () {
    return '' + get$(this, 'applicationAdapter').buildURL('checkout', get$(get$(this, 'currentOrder'), 'id')) + '/next.json}';
  }).property('orderId')
});
export default Spree;
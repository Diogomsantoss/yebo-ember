define("ember-cli-spree-frontend/adapters/application", 
  ["ember-data","ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ApplicationAdapter, ApplicationAdapter;
    var get$ = Ember.get;
    var DS = __dependency1__["default"];
    var config = __dependency2__["default"];
    if (get$(config, 'environment') === 'test') {
      ApplicationAdapter = get$(DS, 'ActiveModelAdapter').extend({ namespace: 'api/ams' });
    } else {
      ApplicationAdapter = get$(DS, 'ActiveModelAdapter').extend({
        namespace: 'api/ams',
        host: get$(get$(config, 'spreeConfig'), 'apiHost'),
        headers: Ember.computed(function () {
          if (get$(get$(this, 'spree'), 'guestToken') && get$(get$(this, 'spree'), 'orderId'))
            return {
              'X-Spree-Order-Token': get$(get$(this, 'spree'), 'guestToken'),
              'X-Spree-Order-Id': get$(get$(this, 'spree'), 'orderId')
            };
        }).property('spree.guestToken', 'spree.orderId')
      });
    }
    __exports__["default"] = ApplicationAdapter;
  });
define("ember-cli-spree-frontend/app", 
  ["ember","ember/resolver","ember/load-initializers","ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var Resolver = __dependency2__["default"];
    var loadInitializers = __dependency3__["default"];
    var config = __dependency4__["default"];

    Ember.MODEL_FACTORY_INJECTIONS = true;

    var App = Ember.Application.extend({
      modulePrefix: config.modulePrefix,
      podModulePrefix: config.podModulePrefix,
      Resolver: Resolver
    });

    loadInitializers(App, config.modulePrefix);

    __exports__["default"] = App;
  });
define("ember-cli-spree-frontend/components/address-form", 
  ["ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var AddressFormComponent;
    var get$ = Ember.get;
    var config = __dependency1__["default"];
    AddressFormComponent = Ember.Component.extend({
      address: null,
      addressKind: null,
      addressPrefix: Ember.computed(function () {
        return get$(this, 'addressKind').charAt(0);
      }).property('addressKind'),
      companyAddress: get$(get$(config, 'spreeConfig'), 'companyAddress'),
      alternativePhone: get$(get$(config, 'spreeConfig'), 'alternativePhone'),
      requiresState: get$(get$(config, 'spreeConfig'), 'requiresState'),
      requiresPhone: get$(get$(config, 'spreeConfig'), 'requiresPhone')
    });
    __exports__["default"] = AddressFormComponent;
  });
define("ember-cli-spree-frontend/components/checkout-progress", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var CheckoutProgressComponent;
    var get$ = Ember.get;
    CheckoutProgressComponent = Ember.Component.extend({
      stepObjects: Ember.computed(function () {
        var step;
        return function (accum$) {
          for (var i$ = 0, length$ = get$(this, 'checkoutSteps').length; i$ < length$; ++i$) {
            step = get$(this, 'checkoutSteps')[i$];
            accum$.push(Ember.Object.create({
              name: step,
              className: 'className-' + step
            }));
          }
          return accum$;
        }.call(this, []);
      }).property('checkoutSteps')
    });
    __exports__["default"] = CheckoutProgressComponent;
  });
define("ember-cli-spree-frontend/components/individual-product", 
  ["ember","ember-cli-spree-frontend/mixins/cycles-classes","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var CyclesClasses = __dependency2__["default"];__exports__["default"] = Ember.Component.extend(CyclesClasses, {
      tagName: 'li',
      classNames: ['columns', 'three'],
      classNameBindings: ['cycle'],
      classNameCycle: ['alpha', 'secondary', '', 'omega']
    });
  });
define("ember-cli-spree-frontend/components/line-item", 
  ["ember","ember-cli-spree-frontend/mixins/cycles-classes","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var CyclesClasses = __dependency2__["default"];__exports__["default"] = Ember.Component.extend(CyclesClasses, {
      tagName: 'tr',
      classNames: ['line-item'],
      classNameBindings: ['cycle'],
      classNameCycle: ['', 'alt']
    });
  });
define("ember-cli-spree-frontend/components/page-numbers", 
  ["ember","ember-cli-pagination/util","ember-cli-pagination/lib/page-items","ember-cli-pagination/validate","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var Util = __dependency2__["default"];
    var PageItems = __dependency3__["default"];
    var Validate = __dependency4__["default"];

    __exports__["default"] = Ember.Component.extend({
      currentPageBinding: "content.page",
      totalPagesBinding: "content.totalPages",

      watchInvalidPage: function() {
        var me = this;
        var c = this.get('content');
        if (c && c.on) {
          c.on('invalidPage', function(e) {
            me.sendAction('invalidPageAction',e);
          });
        }
      }.observes("content"),

      truncatePages: true,
      numPagesToShow: 10,

      validate: function() {
        if (Util.isBlank(this.get('currentPage'))) {
          Validate.internalError("no currentPage for page-numbers");
        }
        if (Util.isBlank(this.get('totalPages'))) {
          Validate.internalError('no totalPages for page-numbers');
        }
      },

      pageItemsObj: function() {
        return PageItems.create({
          parent: this,
          currentPageBinding: "parent.currentPage",
          totalPagesBinding: "parent.totalPages",
          truncatePagesBinding: "parent.truncatePages",
          numPagesToShowBinding: "parent.numPagesToShow",
          showFLBinding: "parent.showFL"
        });
      }.property(),

      //pageItemsBinding: "pageItemsObj.pageItems",

      pageItems: function() {
        this.validate();
        return this.get("pageItemsObj.pageItems");
      }.property("pageItemsObj.pageItems","pageItemsObj"),

      canStepForward: (function() {
        var page = Number(this.get("currentPage"));
        var totalPages = Number(this.get("totalPages"));
        return page < totalPages;
      }).property("currentPage", "totalPages"),

      canStepBackward: (function() {
        var page = Number(this.get("currentPage"));
        return page > 1;
      }).property("currentPage"),

      actions: {
        pageClicked: function(number) {
          Util.log("PageNumbers#pageClicked number " + number);
          this.set("currentPage", number);
          this.sendAction('action',number);
        },
        incrementPage: function(num) {
          var currentPage = Number(this.get("currentPage")),
              totalPages = Number(this.get("totalPages"));

          if(currentPage === totalPages && num === 1) { return false; }
          if(currentPage <= 1 && num === -1) { return false; }
          this.incrementProperty('currentPage', num);

          var newPage = this.get('currentPage');
          this.sendAction('action',newPage);
        }
      }
    });
  });
define("ember-cli-spree-frontend/components/taxonomy-breadcrumbs", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Component.extend({

    });
  });
define("ember-cli-spree-frontend/components/taxons-tree", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Component.extend({
    });
  });
define("ember-cli-spree-frontend/controllers/checkout", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Controller.extend({
      showCheckoutSteps: true
    });
  });
define("ember-cli-spree-frontend/controllers/checkout/address", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var CheckoutAddressController;
    var get$ = Ember.get;
    var set$ = Ember.set;
    CheckoutAddressController = Ember.Controller.extend({
      useBillingAsShipping: true,
      persistOrderAddress: false,
      showShippingForm: Ember.computed(function () {
        return !get$(this, 'useBillingAsShipping');
      }).property('useBillingAsShipping'),
      actions: {
        saveAndContinue: function () {
          set$(get$(this, 'model'), 'billAddress', get$(this, 'billAddress'));
          set$(get$(this, 'model'), 'shipAddress', get$(this, 'useBillingAsShipping') ? get$(this, 'billAddress') : get$(this, 'shipAddress'));
          return get$(this, 'model').save().then(function (this$) {
            return function (order) {
              debugger;
              return get$(this$, 'spree').advanceOrderState();
            };
          }(this), function (error) {
            debugger;
          });
        }
      }
    });
    __exports__["default"] = CheckoutAddressController;
  });
define("ember-cli-spree-frontend/controllers/checkout/registration", 
  ["simple-auth/mixins/login-controller-mixin","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var CheckoutRegistrationController;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var LoginControllerMixin = __dependency1__["default"];
    CheckoutRegistrationController = Ember.Controller.extend(LoginControllerMixin, {
      authenticator: 'simple-auth-authenticator:devise',
      actions: {
        continueAsGuest: function () {
          set$(get$(get$(this, 'spree'), 'currentOrder'), 'email', get$(this, 'guestEmail'));
          return get$(this, 'spree').saveCurrentOrder();
        }
      }
    });
    __exports__["default"] = CheckoutRegistrationController;
  });
define("ember-cli-spree-frontend/controllers/flash", 
  ["ember-cli-spree-frontend/models/flash-queue","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var FlashController;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var FlashQueue = __dependency1__["default"];
    FlashController = Ember.Controller.extend({
      queues: [],
      defaultQueueName: 'main',
      init: function () {
        return this.findOrCreateQueue(get$(this, 'defaultQueueName'));
      },
      findOrCreateQueue: function (queueName) {
        var queue;
        if (queue = get$(this, 'queues').findBy('queueName', queueName)) {
          return queue;
        } else {
          return get$(this, 'queues').pushObject(FlashQueue.create({ queueName: queueName }));
        }
      },
      pushFlash: function (message, options) {
        var queue, queueName;
        if (null != options)
          options;
        else
          options = {};
        queueName = get$(options, 'queueName') ? get$(options, 'queueName') : get$(this, 'defaultQueueName');
        queue = this.findOrCreateQueue(queueName);
        return queue.pushFlash(message, options);
      }
    });
    __exports__["default"] = FlashController;
  });
define("ember-cli-spree-frontend/controllers/index", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.ArrayController.extend({
      page: 1,
      perPage: 12,
      queryParams: ["page", "perPage"],
      pageBinding: "content.page",
      perPageBinding: "content.perPage",
      totalPagesBinding: "content.totalPages"
    });
  });
define("ember-cli-spree-frontend/controllers/products/show", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ProductsShowController;
    var get$ = Ember.get;
    var set$ = Ember.set;
    ProductsShowController = Ember.Controller.extend({
      quantity: 1,
      actions: {
        addToCart: function () {
          var lineItem;
          lineItem = get$(this, 'store').createRecord('lineItem', {
            quantity: get$(this, 'quantity'),
            variant: get$(get$(get$(this, 'model'), 'variantsIncludingMaster'), 'firstObject')
          });
          if (get$(get$(this, 'spree'), 'currentOrder')) {
            return lineItem.save().then(function (this$) {
              return function (lineItem) {
                return get$(this$, 'flash').pushFlash('Item Added to Cart!', { type: 'success' });
              };
            }(this), function (this$) {
              return function (error) {
                return get$(this$, 'flash').pushFlash(error, { type: 'error' });
              };
            }(this));
          } else {
            return get$(this, 'store').createRecord('order').save().then(function (this$) {
              return function (order) {
                get$(this$, 'spree').persist({
                  guestToken: get$(order, 'guestToken'),
                  orderId: get$(order, 'id')
                });
                return lineItem.save().then(function (this$1) {
                  return function (lineItem) {
                    return get$(this$1, 'flash').pushFlash('Item Added to Cart!', { type: 'success' });
                  };
                }(this$), function (this$1) {
                  return function (error) {
                    return get$(this$1, 'flash').pushFlash(error, { type: 'error' });
                  };
                }(this$));
              };
            }(this), function (this$) {
              return function (error) {
                return get$(this$, 'flash').pushFlash(error, { type: 'error' });
              };
            }(this));
          }
        }
      }
    });
    __exports__["default"] = ProductsShowController;
  });
define("ember-cli-spree-frontend/controllers/users/login", 
  ["simple-auth/mixins/login-controller-mixin","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var UsersLoginController;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var LoginControllerMixin = __dependency1__["default"];
    UsersLoginController = Ember.Controller.extend(LoginControllerMixin, { authenticator: 'simple-auth-authenticator:devise' });
    __exports__["default"] = UsersLoginController;
  });
define("ember-cli-spree-frontend/controllers/users/new", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var UsersNewontroller;
    var get$ = Ember.get;
    var set$ = Ember.set;
    UsersNewontroller = Ember.Controller.extend({
      actions: {
        createUser: function () {
          var password;
          password = get$(get$(this, 'model'), 'password');
          return get$(this, 'model').save().then(function (this$) {
            return function (user) {
              return get$(this$, 'session').authenticate('simple-auth-authenticator:devise', {
                identification: get$(user, 'email'),
                password: password
              }).then(function () {
                return console.log('user created and authenticated');
              }, function () {
                return console.log('user created but NOT authenticated');
              });
            };
          }(this), function (error) {
            debugger;
            return console.log('failz');
          });
        }
      }
    });
    __exports__["default"] = UsersNewontroller;
  });
define("ember-cli-spree-frontend/helpers/spree-host", 
  ["ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var spreeHost;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var config = __dependency1__["default"];
    spreeHost = Ember.Handlebars.makeBoundHelper(function (path) {
      return '' + get$(get$(config, 'spreeConfig'), 'apiHost') + path;
    });
    __exports__["default"] = spreeHost;
  });
define("ember-cli-spree-frontend/initializers/customize-simple-auth", 
  ["simple-auth/session","simple-auth-devise/authorizers/devise","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Initializer;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var Session = __dependency1__["default"];
    var Devise = __dependency2__["default"];
    Initializer = {
      name: 'customize-simple-auth',
      before: 'simple-auth',
      initialize: function (container, application) {
        Devise.reopen({
          authorize: function (jqXHR, requestOptions) {
            get$(this, '_super').apply(this, arguments);
            return jqXHR.setRequestHeader('X-Spree-Token', get$(get$(this, 'session'), 'user_token'));
          }
        });
        return Session.reopen({
          currentUser: Ember.computed(function () {
            var userId;
            if (userId = get$(this, 'user_id'))
              return get$(this, 'container').lookup('store:main').find('user', userId);
          }).property('user_id')
        });
      }
    };
    __exports__["default"] = Initializer;
  });
define("ember-cli-spree-frontend/initializers/export-application-global", 
  ["ember","ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var config = __dependency2__["default"];

    function initialize(container, application) {
      var classifiedName = Ember.String.classify(config.modulePrefix);

      if (config.exportApplicationGlobal) {
        window[classifiedName] = application;
      }
    };
    __exports__.initialize = initialize;
    __exports__["default"] = {
      name: 'export-application-global',

      initialize: initialize
    };
  });
define("ember-cli-spree-frontend/initializers/find-by-slug", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Initializer;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    Initializer = {
      name: 'find-by-slug',
      initialize: function (container, application) {
        return get$(DS, 'Store').reopen({
          findBySlug: function (type, slug, preload) {
            var adapter, promise, serializer, store;
            Ember.assert("You need to pass a type to the store's findBySlug method", get$(arguments, 'length') >= 1);
            Ember.assert("You need to pass a slug to the store's findBySlug method", get$(arguments, 'length') >= 2);
            store = this;
            type = this.modelFor(type);
            adapter = this.adapterFor(type);
            serializer = this.serializerFor(type);
            promise = adapter.find(store, type, slug, null);
            return promise.then(function (adapterPayload) {
              var payload;
              payload = serializer.extract(store, type, adapterPayload, slug, 'find');
              return store.push(type, payload);
            }, function (error) {
              throw error;
            });
          }
        });
      }
    };
    __exports__["default"] = Initializer;
  });
define("ember-cli-spree-frontend/initializers/flash-messages", 
  ["ember-cli-spree-frontend/views/flash-outlet","ember-cli-spree-frontend/controllers/flash","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Initializer;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var FlashView = __dependency1__["default"];
    var FlashController = __dependency2__["default"];
    Initializer = {
      name: 'setup-flash-messages',
      initialize: function (container, application) {
        application.register('flash:main', FlashController, {
          instantiate: true,
          singleton: true
        });
        application.inject('controller', 'flash', 'flash:main');
        application.inject('route', 'flash', 'flash:main');
        return application.inject('view:flash-outlet', 'flash', 'flash:main');
      }
    };
    __exports__["default"] = Initializer;
  });
define("ember-cli-spree-frontend/initializers/initialize-spree-global", 
  ["ember-cli-spree-frontend/objects/spree","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Initializer;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var Spree = __dependency1__["default"];
    Initializer = {
      name: 'initialize-spree-global',
      initialize: function (container, application) {
        application.register('spree:main', Spree, {
          instantiate: true,
          singleton: true
        });
        application.inject('spree:main', 'store', 'store:main');
        application.inject('controller', 'spree', 'spree:main');
        application.inject('route', 'spree', 'spree:main');
        return application.inject('adapter:application', 'spree', 'spree:main');
      }
    };
    __exports__["default"] = Initializer;
  });
define("ember-cli-spree-frontend/initializers/simple-auth-devise", 
  ["simple-auth-devise/configuration","simple-auth-devise/authenticators/devise","simple-auth-devise/authorizers/devise","ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {
    "use strict";
    var Configuration = __dependency1__["default"];
    var Authenticator = __dependency2__["default"];
    var Authorizer = __dependency3__["default"];
    var ENV = __dependency4__["default"];

    __exports__["default"] = {
      name:       'simple-auth-devise',
      before:     'simple-auth',
      initialize: function(container, application) {
        Configuration.load(container, ENV['simple-auth-devise'] || {});
        container.register('simple-auth-authorizer:devise', Authorizer);
        container.register('simple-auth-authenticator:devise', Authenticator);
      }
    };
  });
define("ember-cli-spree-frontend/initializers/simple-auth", 
  ["simple-auth/configuration","simple-auth/setup","ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {
    "use strict";
    var Configuration = __dependency1__["default"];
    var setup = __dependency2__["default"];
    var ENV = __dependency3__["default"];

    __exports__["default"] = {
      name:       'simple-auth',
      initialize: function(container, application) {
        Configuration.load(container, ENV['simple-auth'] || {});
        setup(container, application);
      }
    };
  });
define("ember-cli-spree-frontend/mixins/cycles-classes", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Mixin.create({
      cycle: function() {
        var index = this.get('cycleIndex') % this.get('classNameCycle.length');
        return this.get('classNameCycle')[index];
      }.property('cycleIndex')
    });
  });
define("ember-cli-spree-frontend/mixins/read-only", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ReadOnly;
    var get$ = Ember.get;
    var set$ = Ember.set;
    ReadOnly = Ember.Mixin.create({
      serialize: function (record, options) {
        var json;
        json = get$(this, '_super').apply(this, arguments);
        record.eachAttribute(function (name, meta) {
          if (get$(get$(meta, 'options'), 'readOnly'))
            return delete json[name];
        });
        return json;
      }
    });
    __exports__["default"] = ReadOnly;
  });
define("ember-cli-spree-frontend/mixins/route-setup", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Mixin.create({
      activate: function() {
        this._super();

        if (this.get('spreeFrontend')) {
          this.set('spree.frontend', this.get('spreeFrontend'));
        } else {
          this.set('spree.frontend', Ember.Object.create());
        }
      }
    });
  });
define("ember-cli-spree-frontend/models/address", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Address;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    Address = get$(DS, 'Model').extend({
      firstname: DS.attr('string'),
      lastname: DS.attr('string'),
      address1: DS.attr('string'),
      address2: DS.attr('string'),
      city: DS.attr('string'),
      zipcode: DS.attr('string'),
      phone: DS.attr('string'),
      stateName: DS.attr('string'),
      alternativePhone: DS.attr('string'),
      company: DS.attr('string'),
      state: DS.belongsTo('state'),
      country: DS.belongsTo('country')
    });
    __exports__["default"] = Address;
  });
define("ember-cli-spree-frontend/models/country", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Country;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    Country = get$(DS, 'Model').extend({
      isoName: DS.attr('string'),
      iso: DS.attr('string'),
      iso3: DS.attr('string'),
      name: DS.attr('string'),
      numcode: DS.attr('number'),
      statesRequired: DS.attr('boolean'),
      states: DS.hasMany('state'),
      hasStates: Ember.computed(function () {
        return get$(get$(this, 'states'), 'length') > 0;
      }).property('states')
    });
    __exports__["default"] = Country;
  });
define("ember-cli-spree-frontend/models/flash-message", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var FlashMessage;
    var get$ = Ember.get;
    var set$ = Ember.set;
    FlashMessage = Ember.Object.extend({
      timeout: null,
      type: null,
      message: null,
      isNagging: false,
      isNotice: Ember.computed(function () {
        return get$(this, 'type') === 'notice';
      }).property('type'),
      isWarning: Ember.computed(function () {
        return get$(this, 'type') === 'warning';
      }).property('type'),
      isError: Ember.computed(function () {
        return get$(this, 'type') === 'error';
      }).property('type')
    });
    __exports__["default"] = FlashMessage;
  });
define("ember-cli-spree-frontend/models/flash-queue", 
  ["ember-cli-spree-frontend/models/flash-message","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var FlashQueue;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var FlashMessage = __dependency1__["default"];
    FlashQueue = Ember.ArrayController.extend({
      queueName: null,
      timer: null,
      defaultType: 'notice',
      defaultTimeout: 4e3,
      pushFlash: function (message, params) {
        if (null != params)
          params;
        else
          params = {};
        return this.pushObject(FlashMessage.create({
          message: message,
          type: null != get$(params, 'type') ? get$(params, 'type') : get$(this, 'defaultType'),
          isNagging: null != get$(params, 'isNagging') ? get$(params, 'isNagging') : false,
          flashTimeout: null != get$(params, 'flashTimeout') ? get$(params, 'flashTimeout') : get$(this, 'defaultTimeout')
        }));
      },
      dismissFlash: function () {
        if (get$(this, 'timer'))
          Ember.run.cancel(get$(this, 'timer'));
        set$(this, 'timer', null);
        return this.removeObject(this.objectAt(0));
      },
      contentChanged: Ember.observer(function () {
        var currentMessage;
        if (!(get$(this, 'timer') || Ember.empty(get$(this, 'content')))) {
          currentMessage = this.objectAt(0);
          if (!get$(currentMessage, 'isNagging'))
            return set$(this, 'timer', Ember.run.later(this, get$(this, 'dismissFlash'), get$(currentMessage, 'flashTimeout')));
        }
      }, 'content.[]')
    });
    __exports__["default"] = FlashQueue;
  });
define("ember-cli-spree-frontend/models/image", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Image;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    Image = get$(DS, 'Model').extend({
      alt: DS.attr('string'),
      miniUrl: DS.attr('string'),
      smallUrl: DS.attr('string'),
      productUrl: DS.attr('string'),
      largeUrl: DS.attr('string')
    });
    __exports__["default"] = Image;
  });
define("ember-cli-spree-frontend/models/line-item", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var LineItem;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    LineItem = get$(DS, 'Model').extend({
      variant: DS.belongsTo('variant'),
      quantity: DS.attr('number'),
      singleDisplayAmount: DS.attr('string', { readOnly: true }),
      insufficientStock: DS.attr('boolean', { readOnly: true }),
      price: DS.attr('number'),
      total: DS.attr('number')
    });
    __exports__["default"] = LineItem;
  });
define("ember-cli-spree-frontend/models/order", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Order;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    Order = get$(DS, 'Model').extend({
      additionalTaxTotal: DS.attr('number', { readOnly: true }),
      adjustmentTotal: DS.attr('number', { readOnly: true }),
      channel: DS.attr('string', { readOnly: true }),
      checkoutSteps: DS.attr('array', { readOnly: true }),
      completedAt: DS.attr('date', { readOnly: true }),
      confirmationDelivered: DS.attr('boolean'),
      consideredRisky: DS.attr('boolean', { readOnly: true }),
      createdAt: DS.attr('date', { readOnly: true }),
      currency: DS.attr('string', { readOnly: true }),
      email: DS.attr('string'),
      guestToken: DS.attr('string', { readOnly: true }),
      includedTaxTotal: DS.attr('number', { readOnly: true }),
      itemCount: DS.attr('number', { readOnly: true }),
      itemTotal: DS.attr('number', { readOnly: true }),
      number: DS.attr('string', { readOnly: true }),
      paymentTotal: DS.attr('number', { readOnly: true }),
      promoTotal: DS.attr('number', { readOnly: true }),
      shipmentTotal: DS.attr('number', { readOnly: true }),
      specialInstructions: DS.attr('string'),
      state: DS.attr('string', { readOnly: true }),
      total: DS.attr('number', { readOnly: true }),
      updatedAt: DS.attr('date', { readOnly: true }),
      billAddress: DS.belongsTo('address'),
      shipAddress: DS.belongsTo('address'),
      lineItems: DS.hasMany('lineItem'),
      shipments: DS.hasMany('shipment'),
      shippingMethod: DS.belongsTo('shippingMethod'),
      empty: Ember.computed(function () {
        return get$(this, 'itemCount') === 0;
      }).property('itemCount'),
      hasEmail: Ember.computed(function () {
        if (get$(this, 'email'))
          return get$(get$(this, 'email'), 'length') > 0;
      }).property('email'),
      notConfirm: Ember.computed(function () {
        return get$(this, 'state') === !'confirm';
      }).property('state')
    });
    __exports__["default"] = Order;
  });
define("ember-cli-spree-frontend/models/product-property", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ProductProperty;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    ProductProperty = get$(DS, 'Model').extend();
    __exports__["default"] = ProductProperty;
  });
define("ember-cli-spree-frontend/models/product", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Product;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    Product = get$(DS, 'Model').extend({
      name: DS.attr('string'),
      description: DS.attr('string'),
      price: DS.attr('number'),
      displayPrice: DS.attr('string'),
      slug: DS.attr('string'),
      images: DS.hasMany('image'),
      variantsIncludingMaster: DS.hasMany('variant'),
      productProperties: DS.hasMany('productProperty')
    });
    __exports__["default"] = Product;
  });
define("ember-cli-spree-frontend/models/shipment", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Shipment;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    Shipment = get$(DS, 'Model').extend({
      tracking: DS.attr('string'),
      number: DS.attr('string'),
      cost: DS.attr('number'),
      shippedAt: DS.attr('date'),
      state: DS.attr('string'),
      order: DS.belongsTo('order'),
      stockLocation: DS.belongsTo('stockLocation'),
      shippingRates: DS.hasMany('shippingRate')
    });
    __exports__["default"] = Shipment;
  });
define("ember-cli-spree-frontend/models/shipping-category", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ShippingCategory;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    ShippingCategory = get$(DS, 'Model').extend({ name: DS.attr('string') });
    __exports__["default"] = ShippingCategory;
  });
define("ember-cli-spree-frontend/models/shipping-method", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ShippingMethod;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    ShippingMethod = get$(DS, 'Model').extend({
      name: DS.attr('string'),
      zones: DS.hasMany('zone'),
      shippingCategories: DS.hasMany('shippingCategory')
    });
    __exports__["default"] = ShippingMethod;
  });
define("ember-cli-spree-frontend/models/shipping-rate", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ShippingRate;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    ShippingRate = get$(DS, 'Model').extend({
      name: DS.attr('string'),
      cost: DS.attr('number'),
      selected: DS.attr('boolean'),
      displayCost: DS.attr('string'),
      shippingMethod: DS.belongsTo('shippingMethod')
    });
    __exports__["default"] = ShippingRate;
  });
define("ember-cli-spree-frontend/models/state", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var State;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    State = get$(DS, 'Model').extend({
      name: DS.attr('string'),
      abbr: DS.attr('string'),
      country: DS.belongsTo('country')
    });
    __exports__["default"] = State;
  });
define("ember-cli-spree-frontend/models/stock-location", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var StockLocation;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    StockLocation = get$(DS, 'Model').extend({ name: DS.attr('string') });
    __exports__["default"] = StockLocation;
  });
define("ember-cli-spree-frontend/models/taxon", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DS = __dependency1__["default"];

    __exports__["default"] = DS.Model.extend({
      name: DS.attr('string'),
      prettyName: DS.attr('string'),
      permalink: DS.attr('string'),
      parentId: DS.attr('number'),
      taxonomy: DS.belongsTo('taxonomy')
    });
  });
define("ember-cli-spree-frontend/models/taxonomy", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DS = __dependency1__["default"];

    __exports__["default"] = DS.Model.extend({
      name: DS.attr('string'),
      permalink: DS.attr('string'),
      prettyName: DS.attr('string'),
      taxons: DS.hasMany('taxon'),

      root: function() {
        return this.get('taxons').findBy('parentId', undefined);
      }.property('taxons'),

      taxonsExcludingRoot: function() {
        return this.get('taxons').filterBy('parentId');
      }.property('taxons')
    });
  });
define("ember-cli-spree-frontend/models/user", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var User;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    User = get$(DS, 'Model').extend({
      authenticationToken: DS.attr('string'),
      createdAt: DS.attr('string'),
      currentSignInAt: DS.attr('string'),
      email: DS.attr('string'),
      failedAttempts: DS.attr('number'),
      lastRequestAt: DS.attr('string'),
      lockedAt: DS.attr('string'),
      login: DS.attr('string'),
      perishableToken: DS.attr('string'),
      persistenceToken: DS.attr('string'),
      rememberCreated_at: DS.attr('string'),
      rememberToken: DS.attr('string'),
      resetPasswordSentAt: DS.attr('string'),
      resetPasswordToken: DS.attr('string'),
      signInCount: DS.attr('number'),
      spreeApiKey: DS.attr('string'),
      unlockToken: DS.attr('string'),
      updatedAt: DS.attr('string'),
      password: DS.attr('string'),
      passwordConfirmation: DS.attr('string')
    });
    __exports__["default"] = User;
  });
define("ember-cli-spree-frontend/models/variant", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Variant;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    Variant = get$(DS, 'Model').extend({
      name: DS.attr('string'),
      sku: DS.attr('string'),
      price: DS.attr('number'),
      weight: DS.attr('number'),
      height: DS.attr('number'),
      width: DS.attr('number'),
      depth: DS.attr('number'),
      isMaster: DS.attr('boolean'),
      costPrice: DS.attr('number'),
      slug: DS.attr('string'),
      description: DS.attr('string'),
      trackInventory: DS.attr('boolean'),
      displayPrice: DS.attr('string'),
      optionsText: DS.attr('string'),
      images: DS.hasMany('image')
    });
    __exports__["default"] = Variant;
  });
define("ember-cli-spree-frontend/models/zone", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Zone;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    Zone = get$(DS, 'Model').extend({
      name: DS.attr('string'),
      description: DS.attr('string')
    });
    __exports__["default"] = Zone;
  });
define("ember-cli-spree-frontend/objects/spree", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var Spree;
    var get$ = Ember.get;
    var set$ = Ember.set;
    Spree = Ember.Object.extend(Ember.Evented, {
      key: 'spree_ember',
      orderToken: null,
      orderId: null,
      frontend: Ember.Object.create(),
      init: function () {
        return this.restore(this.localStorageData());
      },
      persist: function (data) {
        this.restore(data);
        data = JSON.stringify(data || {});
        return localStorage.setItem(get$(this, 'key'), data);
      },
      restore: function (data) {
        var key, value;
        return function (accum$) {
          for (key in data) {
            value = data[key];
            accum$.push(this.set(key, value));
          }
          return accum$;
        }.call(this, []);
      },
      localStorageData: function () {
        var data;
        data = localStorage.getItem(get$(this, 'key'));
        return JSON.parse(data || '{}');
      },
      clear: function () {
        return localStorage.removeItem(get$(this, 'key'));
      },
      clearCurrentOrder: function () {
        return set$(this, 'orderId', null);
      },
      currentOrder: Ember.computed(function () {
        if (get$(this, 'orderId'))
          return get$(this, 'store').find('order', get$(this, 'orderId'));
      }).property('orderId'),
      currentOrderCanAdvance: Ember.computed(function () {
        switch (get$(get$(this, 'currentOrder'), 'state')) {
        case 'cart':
          return true;
        case 'address':
          return get$(get$(this, 'currentOrder'), 'shipAddress') && get$(get$(this, 'currentOrder'), 'billAddress');
        case 'delivery':
          return false;
        case 'payment':
          return false;
        case 'confirm':
          return true;
        case 'complete':
          return false;
        }
      }).property('currentOrder.state'),
      advanceOrderState: function () {
        if (get$(this, 'currentOrderCanAdvance')) {
          return get$(this, 'applicationAdapter').ajax(get$(this, 'nextURL'), 'PUT').then(function (this$) {
            return function (order) {
              get$(this$, 'store').pushPayload(order);
              return this$.trigger('spreeOrderDidAdvance');
            };
          }(this), function (this$) {
            return function (error) {
              return this$.trigger('spreeOrderDidNotAdvance', error);
            };
          }(this));
        } else {
          return this.trigger('spreeOrderCanNotAdvance');
        }
      },
      saveCurrentOrder: function () {
        return get$(get$(this, 'currentOrder'), 'content').save().then(function (order) {
          debugger;
        }, function (error) {
          debugger;
        });
      },
      applicationAdapter: Ember.computed(function () {
        return get$(this, 'container').lookup('adapter:application');
      }).property('container'),
      nextURL: Ember.computed(function () {
        return '' + get$(this, 'applicationAdapter').buildURL('checkout', get$(get$(this, 'currentOrder'), 'id')) + '/next.json}';
      }).property('orderId')
    });
    __exports__["default"] = Spree;
  });
define("ember-cli-spree-frontend/router", 
  ["ember","ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var config = __dependency2__["default"];

    var Router = Ember.Router.extend({
      location: config.locationType
    });

    Router.map(function() {
      this.route('index', { path: "/" });

      this.route('cart');

      this.resource('users', function(){
        this.route('show');
        this.route('login');
        this.route('edit');
        this.route('new');
      });

      this.resource('products', function(){
        this.route('show', { path: '/:slug' });
      });

      this.resource('checkout', function(){
        this.route('registration');
        this.route('address');
        this.route('delivery');
        this.route('payment');
      });

      this.resource("taxons", { path: '/t' }, function() {
        this.route("show", { path: '/:permalink' });
      });

    });

    __exports__["default"] = Router;
  });
define("ember-cli-spree-frontend/routes/application", 
  ["ember-cli-spree-frontend/mixins/route-setup","simple-auth/mixins/application-route-mixin","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ApplicationRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    var ApplicationRouteMixin = __dependency2__["default"];
    ApplicationRoute = Ember.Route.extend(ApplicationRouteMixin, SpreeRouteSetup, {
      init: function () {
        get$(this, 'spree').on('spreeOrderDidAdvance', function (this$) {
          return function () {
            return this$.transitionTo('checkout');
          };
        }(this));
        get$(this, 'spree').on('spreeOrderDidNotAdvance', function (this$) {
          return function (error) {
            switch (get$(error, 'statusText')) {
            case 'Not Found':
              get$(this$, 'flash').pushFlash('Order could not be found in the backend.', { type: 'error' });
              set$(get$(this$, 'spree'), 'currentOrder', null);
              return this$.transitionTo('index');
            default: {
                debugger;
                return get$(this$, 'flash').pushFlash('Order could not transition.', { type: 'error' });
              }
            }
          };
        }(this));
        return get$(this, 'spree').on('spreeOrderCanNotAdvance', function (this$) {
          return function () {
            return this$.transitionTo('checkout');
          };
        }(this));
      },
      model: function () {
        return Ember.RSVP.hash({ taxonomies: get$(this, 'store').find('taxonomy') });
      },
      actions: {
        sessionAuthenticationFailed: function (error) {
          return get$(this, 'flash').pushFlash('Invalid email or password.', {
            type: 'error',
            isNagging: true
          });
        }
      }
    });
    __exports__["default"] = ApplicationRoute;
  });
define("ember-cli-spree-frontend/routes/cart", 
  ["ember-cli-spree-frontend/mixins/route-setup","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var CartRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    CartRoute = Ember.Route.extend(SpreeRouteSetup, {
      model: function () {
        return get$(get$(this, 'spree'), 'currentOrder');
      }
    });
    __exports__["default"] = CartRoute;
  });
define("ember-cli-spree-frontend/routes/checkout", 
  ["ember-cli-spree-frontend/mixins/route-setup","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var CheckoutRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    CheckoutRoute = Ember.Route.extend(SpreeRouteSetup, {
      showCheckoutSteps: true,
      model: function () {
        return get$(get$(this, 'spree'), 'currentOrder');
      },
      redirect: function (model, transition) {
        if (!model)
          this.transitionTo('index');
        if (get$(model, 'state') === 'cart') {
          return this.transitionTo('cart');
        } else if (get$(model, 'hasEmail')) {
          return this.transitionTo('checkout.' + get$(model, 'state'));
        } else {
          return this.transitionTo('checkout.registration');
        }
      }
    });
    __exports__["default"] = CheckoutRoute;
  });
define("ember-cli-spree-frontend/routes/checkout/address", 
  ["ember-cli-spree-frontend/mixins/route-setup","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var CheckoutAddressRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    CheckoutAddressRoute = Ember.Route.extend(SpreeRouteSetup, {
      setupController: function (controller, model) {
        this._super(controller, model);
        set$(controller, 'billAddress', get$(model, 'billAddress') || get$(this, 'store').createRecord('address'));
        set$(controller, 'shipAddress', get$(model, 'shipAddress') || get$(this, 'store').createRecord('address'));
        return set$(controller, 'countries', get$(this, 'store').find('country'));
      }
    });
    __exports__["default"] = CheckoutAddressRoute;
  });
define("ember-cli-spree-frontend/routes/checkout/registration", 
  ["ember-cli-spree-frontend/mixins/route-setup","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var CheckoutRegistrationRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    CheckoutRegistrationRoute = Ember.Route.extend(SpreeRouteSetup, {
      model: function () {
        return get$(get$(this, 'spree'), 'currentOrder');
      }
    });
    __exports__["default"] = CheckoutRegistrationRoute;
  });
define("ember-cli-spree-frontend/routes/index", 
  ["ember-cli-spree-frontend/mixins/route-setup","ember-cli-pagination/remote/route-mixin","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var IndexRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    var PaginatedRouteMixin = __dependency2__["default"];
    IndexRoute = Ember.Route.extend(SpreeRouteSetup, PaginatedRouteMixin, {
      perPage: 12,
      model: function (params) {
        return this.findPaged('product', params);
      },
      spreeFrontend: { sidebarPartial: 'shared/taxonomies' }
    });
    __exports__["default"] = IndexRoute;
  });
define("ember-cli-spree-frontend/routes/products/show", 
  ["ember-cli-spree-frontend/mixins/route-setup","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ProductsShowRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    ProductsShowRoute = Ember.Route.extend(SpreeRouteSetup, {
      model: function (params) {
        return get$(this, 'store').findBySlug('product', get$(params, 'slug'));
      }
    });
    __exports__["default"] = ProductsShowRoute;;
  });
define("ember-cli-spree-frontend/routes/registration", 
  ["ember-cli-spree-frontend/mixins/route-setup","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var RegistrationRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    RegistrationRoute = Ember.Route.extend(SpreeRouteSetup, {
      model: function () {
        return get$(get$(this, 'spree'), 'currentOrder');
      }
    });
    __exports__["default"] = RegistrationRoute;
  });
define("ember-cli-spree-frontend/routes/taxons/show", 
  ["ember","ember-cli-spree-frontend/mixins/route-setup","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var SpreeRouteSetup = __dependency2__["default"];

    __exports__["default"] = Ember.Route.extend(SpreeRouteSetup, {
      model: function(params) {
        var taxonomies = this.modelFor('application').taxonomies;

        var taxonomy = taxonomies.findBy('permalink', params.permalink)
        debugger
        return taxonomies.findBy('permalink', params.permalink);
      },

      setupController: function(model) {
        if (this.get('spree.frontend.taxonBreadcrumbs')) {
          this.get('spree.frontend.taxonBreadcrumbs').pushObject(model);
        } else {
          this.set('spree.frontend.taxonBreadcrumbs', Ember.A([model]));
        }
        this._super.apply(this, arguments);
      }
    });
  });
define("ember-cli-spree-frontend/routes/users/new", 
  ["ember-cli-spree-frontend/mixins/route-setup","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var UsersNewRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    UsersNewRoute = Ember.Route.extend(SpreeRouteSetup, {
      model: function () {
        return get$(this, 'store').createRecord('user');
      }
    });
    __exports__["default"] = UsersNewRoute;;
  });
define("ember-cli-spree-frontend/routes/users/show", 
  ["ember-cli-spree-frontend/mixins/route-setup","simple-auth/mixins/authenticated-route-mixin","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var UsersShowRoute;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var SpreeRouteSetup = __dependency1__["default"];
    var AuthenticatedRouteMixin = __dependency2__["default"];

    UsersShowRoute = Ember.Route.extend(AuthenticatedRouteMixin, SpreeRouteSetup);
    __exports__["default"] = UsersShowRoute;;
  });
define("ember-cli-spree-frontend/serializers/application", 
  ["ember-data","ember-cli-spree-frontend/mixins/read-only","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ApplicationSerializer;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    var ReadOnly = __dependency2__["default"];
    ApplicationSerializer = get$(DS, 'ActiveModelSerializer').extend(ReadOnly);
    __exports__["default"] = ApplicationSerializer;
  });
define("ember-cli-spree-frontend/serializers/order", 
  ["ember-data","ember-cli-spree-frontend/serializers/application","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var OrderSerializer;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    var ApplicationSerializer = __dependency2__["default"];
    OrderSerializer = ApplicationSerializer.extend(get$(DS, 'EmbeddedRecordsMixin'), {
      attrs: {
        billAddress: {
          serialize: 'records',
          deserialize: 'id'
        },
        shipAddress: {
          serialize: 'records',
          deserialize: 'id'
        }
      }
    });
    __exports__["default"] = OrderSerializer;
  });
define("ember-cli-spree-frontend/templates/application", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var helper, options;
      data.buffer.push(escapeExpression((helper = helpers['taxonomy-breadcrumbs'] || (depth0 && depth0['taxonomy-breadcrumbs']),options={hash:{
        'taxonBreadcrumbs': ("spree.frontend.taxonBreadcrumbs")
      },hashTypes:{'taxonBreadcrumbs': "ID"},hashContexts:{'taxonBreadcrumbs': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "taxonomy-breadcrumbs", options))));
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program5(depth0,data) {
      
      var buffer = '', helper, options;
      data.buffer.push("<aside id=\"sidebar\" class=\"columns four\"><div data-hook=\"homepage_sidebar_navigation\">");
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "spree.frontend.sidebarPartial", options) : helperMissing.call(depth0, "partial", "spree.frontend.sidebarPartial", options))));
      data.buffer.push("</div></aside>");
      return buffer;
      }

      data.buffer.push("<div class=\"container\">");
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "shared/header", options) : helperMissing.call(depth0, "partial", "shared/header", options))));
      data.buffer.push("<div id=\"wrapper\" class=\"row\">");
      stack1 = helpers['if'].call(depth0, "spree.frontend.taxonBreadcrumbs", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      stack1 = helpers['if'].call(depth0, "spree.frontend.sidebarPartial", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("<div id=\"content\" ");
      data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
        'class': (":columns spree.frontend.sidebarPartial:twelve:sixteen spree.frontend.sidebarPartial:omega")
      },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
      data.buffer.push(">");
      data.buffer.push(escapeExpression(helpers.view.call(depth0, "flash-outlet", {hash:{
        'class': ("flash")
      },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[depth0],types:["STRING"],data:data})));
      stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div></div>");
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "shared/footer", options) : helperMissing.call(depth0, "partial", "shared/footer", options))));
      data.buffer.push("</div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/cart", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

    function program1(depth0,data) {
      
      var stack1;
      stack1 = helpers['if'].call(depth0, "model.empty", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(7, program7, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }
    function program2(depth0,data) {
      
      var buffer = '', stack1, helper, options;
      data.buffer.push("<div data-hook=\"empty_cart\"><p>Your Cart is Empty</p><p>");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
        'class': ("button continue")
      },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</p></div>");
      return buffer;
      }
    function program3(depth0,data) {
      
      
      data.buffer.push("Continue Shopping");
      }

    function program5(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program7(depth0,data) {
      
      var buffer = '', stack1, helper, options;
      data.buffer.push("<div data-hook=\"outside_cart_form\"><form id=\"update-cart\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "updateOrder", {hash:{
        'on': ("submit")
      },hashTypes:{'on': "STRING"},hashContexts:{'on': depth0},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(" accept-charset=\"UTF-8\" class=\"edit_order\"><div data-hook=\"inside_cart_form\">");
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "cart/form", options) : helperMissing.call(depth0, "partial", "cart/form", options))));
      data.buffer.push("<div data-hook=\"cart_buttons\" class=\"links columns sixteen alpha omega\">");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'id': ("order_coupon_code"),
        'placeholder': ("Coupon code"),
        'size': ("10"),
        'type': ("text")
      },hashTypes:{'id': "STRING",'placeholder': "STRING",'size': "STRING",'type': "STRING"},hashContexts:{'id': depth0,'placeholder': depth0,'size': depth0,'type': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("<button id=\"update-button\" name=\"button\" type=\"submit\" class=\"primary\">Update</button><button id=\"checkout-link\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "advanceOrderState", "", {hash:{
        'target': ("spree")
      },hashTypes:{'target': "STRING"},hashContexts:{'target': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
      data.buffer.push(" class=\"button checkout primary\">Checkout</button></div></div></form></div><div id=\"empty-cart\"><form><p id=\"clear_cart_link\"><input name=\"commit\" type=\"submit\" value=\"Empty Cart\" class=\"button gray\" />or");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
        'class': ("continue button gray")
      },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.program(5, program5, data),fn:self.program(8, program8, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</p></form></div>");
      return buffer;
      }
    function program8(depth0,data) {
      
      
      data.buffer.push("Continue shopping");
      }

      data.buffer.push("<div data-hook=\"cart_container\"><h1>Shopping Cart</h1>");
      stack1 = helpers['if'].call(depth0, "model", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(2, program2, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/cart/-form", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var helper, options;
      data.buffer.push(escapeExpression((helper = helpers['line-item'] || (depth0 && depth0['line-item']),options={hash:{
        'lineItem': ("lineItem"),
        'cycleIndex': ("index")
      },hashTypes:{'lineItem': "ID",'cycleIndex': "ID"},hashContexts:{'lineItem': depth0,'cycleIndex': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "line-item", options))));
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

      data.buffer.push("<div data-hook=\"cart_items\"><table id=\"cart-detail\"><thead><tr data-hook=\"cart_items_headers\"><th colspan=\"2\" class=\"cart-item-description-header\">Item</th><th class=\"cart-item-price-header\">Price</th><th class=\"cart-item-quantity-header\">Qty</th><th class=\"cart-item-total-header\">Total</th><th class=\"cart-item-delete-header\"></th></tr></thead><tbody id=\"line_items\">");
      stack1 = (helper = helpers.eachIndexed || (depth0 && depth0.eachIndexed),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data},helper ? helper.call(depth0, "lineItem", "in", "model.lineItems", options) : helperMissing.call(depth0, "eachIndexed", "lineItem", "in", "model.lineItems", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</tbody><tbody><tr class=\"cart-total\"><td colspan=\"4\" align=\"right\"><h5>Total</h5></td><td colspan=\"\"><h5>");
      stack1 = helpers._triageMustache.call(depth0, "model.total", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</h5></td><td></td></tr></tbody></table></div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/checkout", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = '', stack1, helper, options;
      data.buffer.push("<div id=\"checkout\"><div data-hook=\"checkout_header\" class=\"row\"><h1 data-hook=\"checkout_title\" class=\"columns three alpha\">Checkout</h1><div data-hook=\"checkout_progress\" class=\"columns thirteen omega\">");
      data.buffer.push(escapeExpression((helper = helpers['checkout-progress'] || (depth0 && depth0['checkout-progress']),options={hash:{
        'checkoutSteps': ("spree.currentOrder.checkoutSteps"),
        'orderState': ("spree.currentOrder.state")
      },hashTypes:{'checkoutSteps': "ID",'orderState': "ID"},hashContexts:{'checkoutSteps': depth0,'orderState': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "checkout-progress", options))));
      data.buffer.push("</div></div><div data-hook=\"checkout_content\" class=\"row\"><div data-hook=\"checkout_form_wrapper\" ");
      data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
        'class': (":columns :alpha model.notConfirm:twelve:sixteen model.notConfirm::omega")
      },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
      data.buffer.push(">");
      stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div>");
      stack1 = helpers['if'].call(depth0, "model.notConfirm", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div></div>");
      return buffer;
      }
    function program2(depth0,data) {
      
      
      data.buffer.push("<div id=\"checkout-summary\" data-hook=\"checkout_summary_box\" class=\"columns omega four\"><h6>render partial summary</h6></div>");
      }

    function program4(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program6(depth0,data) {
      
      var stack1;
      stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }

      stack1 = helpers['if'].call(depth0, "showCheckoutSteps", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      
    });
  });
define("ember-cli-spree-frontend/templates/checkout/address", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var helper, options;
      data.buffer.push(escapeExpression((helper = helpers['address-form'] || (depth0 && depth0['address-form']),options={hash:{
        'address': ("shipAddress"),
        'addressKind': ("shipping"),
        'countries': ("countries")
      },hashTypes:{'address': "ID",'addressKind': "STRING",'countries': "ID"},hashContexts:{'address': depth0,'addressKind': depth0,'countries': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "address-form", options))));
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program5(depth0,data) {
      
      var buffer = '', helper, options;
      data.buffer.push("<span data-hook=\"save_user_address\">&nbsp; &nbsp;");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'type': ("checkbox"),
        'checked': ("persistOrderAddress"),
        'id': ("save_user_address")
      },hashTypes:{'type': "STRING",'checked': "ID",'id': "STRING"},hashContexts:{'type': depth0,'checked': depth0,'id': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("<label for=\"save_user_address\">Save My Address</label></span>");
      return buffer;
      }

      data.buffer.push("<div data-hook=\"billing_fieldset_wrapper\" class=\"columns alpha six\"><fieldset id=\"billing\"><legend align=\"center\">Billing Address</legend>");
      data.buffer.push(escapeExpression((helper = helpers['address-form'] || (depth0 && depth0['address-form']),options={hash:{
        'address': ("billAddress"),
        'addressKind': ("billing"),
        'countries': ("countries")
      },hashTypes:{'address': "ID",'addressKind': "STRING",'countries': "ID"},hashContexts:{'address': depth0,'addressKind': depth0,'countries': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "address-form", options))));
      data.buffer.push("</fieldset></div><div data-hook=\"shipping_fieldset_wrapper\" class=\"columns omega six\"><fieldset id=\"shipping\"><legend align=\"center\">Shipping Address</legend><p data-hook=\"use_billing\" class=\"field checkbox\">");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'type': ("checkbox"),
        'checked': ("useBillingAsShipping"),
        'id': ("order_use_billing")
      },hashTypes:{'type': "STRING",'checked': "ID",'id': "STRING"},hashContexts:{'type': depth0,'checked': depth0,'id': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("<label id=\"use_billing\" for=\"order_use_billing\">Use Billing Address</label></p>");
      stack1 = helpers['if'].call(depth0, "showShippingForm", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</fieldset></div><hr class=\"clear\" /><div data-hook=\"buttons\" class=\"form-buttons\"><button ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "saveAndContinue", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(" class=\"button continue primary\">Save and Continue</button>");
      stack1 = helpers['if'].call(depth0, "session.currentUser", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/checkout/delivery", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', escapeExpression=this.escapeExpression;


      data.buffer.push("<button id=\"checkout-link\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "advanceOrderState", {hash:{
        'target': ("spree")
      },hashTypes:{'target': "STRING"},hashContexts:{'target': depth0},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(" class=\"button checkout primary\">Advance</button><div data-hook=\"checkout_form_wrapper\" class=\"columns alpha twelve\"><form id=\"checkout_form_delivery\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "advanceOrderState", {hash:{
        'target': ("spree")
      },hashTypes:{'target': "STRING"},hashContexts:{'target': depth0},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(" accept-charset=\"UTF-8\" class=\"edit_order\"><fieldset id=\"shipping_method\"><legend align=\"center\">Delivery</legend><div class=\"inner\"><div id=\"methods\"><div class=\"shipment\"><h3 class=\"stock-location\">package from<strong data-hook=\"stock-location-name\" class=\"stock-location-name\">default</strong></h3><table data-hook=\"stock-contents\" class=\"stock-contents\"><colgroup><col style=\"width: 10%;\" /><col style=\"width: 60%;\" /><col style=\"width: 10%;\" /><col style=\"width: 20%;\" /></colgroup><thead><tr><th>h</th><th align=\"left\">Item</th><th>Qtu</th><th>Price</th></tr></thead></table></div></div></div></fieldset></form></div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/checkout/registration", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

    function program1(depth0,data) {
      
      
      data.buffer.push("Create a new account");
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

      data.buffer.push("<h1>Registration</h1><div id=\"registration\"><div id=\"account\" class=\"columns alpha eight\"><div id=\"existing-customer\"><h6>Login as Existing Customer</h6><div data-hook=\"login\"><form ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "loginUser", {hash:{
        'on': ("submit")
      },hashTypes:{'on': "STRING"},hashContexts:{'on': depth0},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(" accept-charset=\"UTF-8\" class=\"new_spree_user\" id=\"new_spree_user\"><div id=\"password-credentials\"><p><label for=\"spree_user_email\">Email</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'autofocus': ("autofocus"),
        'class': ("title"),
        'id': ("spree_user_email"),
        'name': ("spree_user[email]"),
        'tabindex': ("1"),
        'type': ("email")
      },hashTypes:{'autofocus': "STRING",'class': "STRING",'id': "STRING",'name': "STRING",'tabindex': "STRING",'type': "STRING"},hashContexts:{'autofocus': depth0,'class': depth0,'id': depth0,'name': depth0,'tabindex': depth0,'type': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p><label for=\"spree_user_password\">Password</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("title"),
        'id': ("spree_user_password"),
        'name': ("spree_user[password]"),
        'tabindex': ("2"),
        'type': ("password")
      },hashTypes:{'class': "STRING",'id': "STRING",'name': "STRING",'tabindex': "STRING",'type': "STRING"},hashContexts:{'class': depth0,'id': depth0,'name': depth0,'tabindex': depth0,'type': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p>todo Remember Me</p><p>");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("button primary"),
        'name': ("commit"),
        'tabindex': ("4"),
        'type': ("submit"),
        'value': ("Login")
      },hashTypes:{'class': "STRING",'name': "STRING",'tabindex': "STRING",'type': "STRING",'value': "STRING"},hashContexts:{'class': depth0,'name': depth0,'tabindex': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p></div></form>or &nbsp;");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "users.new", options) : helperMissing.call(depth0, "link-to", "users.new", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("|<h6>todo Forgot Password?</h6></div></div></div><div id=\"guest_checkout\" class=\"columns omega eight\"><h6>Checkout as a Guest</h6><form id=\"checkout_form_registration\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "continueAsGuest", {hash:{
        'on': ("submit")
      },hashTypes:{'on': "STRING"},hashContexts:{'on': depth0},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(" accept-charset=\"UTF-8\" class=\"edit_order\"><p><label for=\"order_email\">Email</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("title"),
        'id': ("order_email"),
        'name': ("order[email]"),
        'type': ("email"),
        'value': ("guestEmail")
      },hashTypes:{'class': "STRING",'id': "STRING",'name': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'id': depth0,'name': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p><button type=\"submit\" class=\"button primary\">Continue</button></p></form></div></div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/components/address-form", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = '', helper, options;
      data.buffer.push("<p class=\"field\"><label>Company</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'type': ("text"),
        'value': ("address.company")
      },hashTypes:{'type': "STRING",'value': "ID"},hashContexts:{'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p>");
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program5(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("<label>State</label><span class=\"required\">*</span><br />");
      stack1 = helpers['if'].call(depth0, "address.country.hasStates", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      return buffer;
      }
    function program6(depth0,data) {
      
      
      data.buffer.push(escapeExpression(helpers.view.call(depth0, "select", {hash:{
        'content': ("address.country.states"),
        'class': ("required"),
        'optionLabelPath': ("content.name"),
        'value': ("address.state"),
        'prompt': ("Select a State")
      },hashTypes:{'content': "ID",'class': "STRING",'optionLabelPath': "STRING",'value': "ID",'prompt': "STRING"},hashContexts:{'content': depth0,'class': depth0,'optionLabelPath': depth0,'value': depth0,'prompt': depth0},contexts:[depth0],types:["STRING"],data:data})));
      }

    function program8(depth0,data) {
      
      var helper, options;
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("required"),
        'type': ("text"),
        'value': ("address.stateName")
      },hashTypes:{'class': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      }

    function program10(depth0,data) {
      
      var buffer = '', helper, options;
      data.buffer.push("<p class=\"field\"><label>Phone</label><span class=\"required\">*</span><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("required"),
        'type': ("text"),
        'value': ("address.phone")
      },hashTypes:{'class': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p>");
      return buffer;
      }

    function program12(depth0,data) {
      
      var buffer = '', helper, options;
      data.buffer.push("<p class=\"field\"><label>Alternative Phone</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'type': ("text"),
        'value': ("address.alternativePhone")
      },hashTypes:{'type': "STRING",'value': "ID"},hashContexts:{'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p>");
      return buffer;
      }

      data.buffer.push("<div class=\"inner\"><p class=\"field\"><label>First Name</label><span class=\"required\">*</span><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("required"),
        'type': ("text"),
        'value': ("address.firstname")
      },hashTypes:{'class': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p class=\"field\"><label>Last Name</label><span class=\"required\">*</span><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("required"),
        'type': ("text"),
        'value': ("address.lastname")
      },hashTypes:{'class': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p>");
      stack1 = helpers['if'].call(depth0, "companyAddress", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("<p class=\"field\"><label>Street Address</label><span class=\"required\">*</span><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("required"),
        'type': ("text"),
        'value': ("address.address1")
      },hashTypes:{'class': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p class=\"field\"><label>Street Address (contd)</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'type': ("text"),
        'value': ("address.address2")
      },hashTypes:{'type': "STRING",'value': "ID"},hashContexts:{'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p class=\"field\"><label>City</label><span class=\"required\">*</span><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("required"),
        'type': ("text"),
        'value': ("address.city")
      },hashTypes:{'class': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p class=\"field\"><label>Country</label><span class=\"required\">*</span><br /><span>");
      data.buffer.push(escapeExpression(helpers.view.call(depth0, "select", {hash:{
        'content': ("countries"),
        'class': ("required"),
        'optionLabelPath': ("content.name"),
        'value': ("address.country"),
        'prompt': ("Select a Country")
      },hashTypes:{'content': "ID",'class': "STRING",'optionLabelPath': "STRING",'value': "ID",'prompt': "STRING"},hashContexts:{'content': depth0,'class': depth0,'optionLabelPath': depth0,'value': depth0,'prompt': depth0},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push("</span></p>");
      stack1 = helpers['if'].call(depth0, "address.country.statesRequired", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("<p class=\"field\"><label>Zip</label><span class=\"required\">*</span><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("required"),
        'type': ("text"),
        'value': ("address.zipcode")
      },hashTypes:{'class': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p>");
      stack1 = helpers['if'].call(depth0, "requiresPhone", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      stack1 = helpers['if'].call(depth0, "alternativePhone", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(12, program12, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/components/checkout-progress", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, self=this;

    function program1(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("<li><span>");
      stack1 = helpers._triageMustache.call(depth0, "step.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</span><h1>");
      stack1 = helpers._triageMustache.call(depth0, "step.className", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</h1></li>");
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

      data.buffer.push("<ol class=\"progress-steps\">");
      stack1 = helpers.each.call(depth0, "step", "in", "stepObjects", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</ol>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/components/individual-product", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

    function program1(depth0,data) {
      
      var buffer = '';
      data.buffer.push("<img src=\"");
      data.buffer.push(escapeExpression(helpers.unbound.call(depth0, "spree-host", "product.images.firstObject.smallUrl", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["ID","ID"],data:data})));
      data.buffer.push("\" />");
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program5(depth0,data) {
      
      var stack1;
      stack1 = helpers._triageMustache.call(depth0, "product.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }

      data.buffer.push("<div class=\"product-image\">");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0,depth0],types:["STRING","ID"],data:data},helper ? helper.call(depth0, "products.show", "product", options) : helperMissing.call(depth0, "link-to", "products.show", "product", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div>");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
        'class': ("info")
      },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.program(3, program3, data),fn:self.program(5, program5, data),contexts:[depth0,depth0],types:["STRING","ID"],data:data},helper ? helper.call(depth0, "products.show", "product", options) : helperMissing.call(depth0, "link-to", "products.show", "product", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("<span class=\"price selling\">");
      stack1 = helpers._triageMustache.call(depth0, "product.displayPrice", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</span>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/components/line-item", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

    function program1(depth0,data) {
      
      var stack1, helper, options;
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }
    function program2(depth0,data) {
      
      var buffer = '';
      data.buffer.push("<img src=\"");
      data.buffer.push(escapeExpression(helpers.unbound.call(depth0, "spree-host", "lineItem.variant.images.firstObject.smallUrl", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["ID","ID"],data:data})));
      data.buffer.push("\" />");
      return buffer;
      }

    function program4(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program6(depth0,data) {
      
      var stack1, helper, options;
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }
    function program7(depth0,data) {
      
      
      data.buffer.push("<h6>missing</h6>");
      }

    function program9(depth0,data) {
      
      var stack1;
      stack1 = helpers._triageMustache.call(depth0, "lineItem.variant.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }

    function program11(depth0,data) {
      
      
      data.buffer.push("<span class=\"out-of-stock\">Out of Stock &nbsp;&nbsp;<br /></span>");
      }

    function program13(depth0,data) {
      
      var stack1;
      stack1 = helpers._triageMustache.call(depth0, "lineItem.variant.description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }

    function program15(depth0,data) {
      
      
      data.buffer.push("This product has no description");
      }

      data.buffer.push("<td data-hook=\"cart_item_image\" class=\"cart-item-image\">");
      stack1 = helpers['if'].call(depth0, "lineItem.variant.images.length", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</td><td data-hook=\"cart_item_description\" class=\"cart-item-description\"><h4>");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</h4>");
      stack1 = helpers._triageMustache.call(depth0, "lineItem.variant.optionsText", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      stack1 = helpers['if'].call(depth0, "lineItem.insufficientStock", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(11, program11, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("<span data-hook=\"line_item_description\" class=\"line-item-description\">");
      stack1 = helpers['if'].call(depth0, "lineItem.variant.description", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(15, program15, data),fn:self.program(13, program13, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</span></td><td data-hook=\"cart_item_price\" class=\"cart-item-price\">");
      stack1 = helpers._triageMustache.call(depth0, "lineItem.singleDisplayAmount", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</td><td data-hook=\"cart_item_quantity\" class=\"cart-item-quantity\">");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("line_item_quantity"),
        'size': ("5"),
        'min': ("1"),
        'name': ("quantity"),
        'type': ("number"),
        'value': ("lineItem.quantity")
      },hashTypes:{'class': "STRING",'size': "STRING",'min': "STRING",'name': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'size': depth0,'min': depth0,'name': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</td><td data-hook=\"cart_item_total\" class=\"cart-item-total\">");
      stack1 = helpers._triageMustache.call(depth0, "lineItem.total", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</td><td data-hook=\"cart_item_delete\" class=\"cart-item-delete\"><div id=\"delete_line_item\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteLineItem", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(" class=\"delete\"><img alt=\"Delete\" src=\"/assets/icons/delete.png\" /></div></td>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/components/page-numbers", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = '';
      data.buffer.push("\n    <span class=\"first\">\n      <a href=\"javascript:return false;\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "pageClicked", "pageItems.firstObject.page", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
      data.buffer.push(">« First</a>\n    </span>\n    <span class=\"prev\">\n      <a href=\"javascript:return false;\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "incrementPage", -1, {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","INTEGER"],data:data})));
      data.buffer.push(">‹ Prev</a>\n    </span>\n  ");
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("\n    ");
      stack1 = helpers['if'].call(depth0, "item.current", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n  ");
      return buffer;
      }
    function program4(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("\n      <span class=\"page current\">");
      stack1 = helpers._triageMustache.call(depth0, "item.page", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</span>\n    ");
      return buffer;
      }

    function program6(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("\n      <span class=\"page\">\n        <a href=\"javascript:return false;\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "pageClicked", "item.page", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
      data.buffer.push(">");
      stack1 = helpers._triageMustache.call(depth0, "item.page", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</a>\n      </span>\n    ");
      return buffer;
      }

    function program8(depth0,data) {
      
      var buffer = '';
      data.buffer.push("\n    <span class=\"next\">\n      <a href=\"javascript:return false;\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "incrementPage", 1, {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","INTEGER"],data:data})));
      data.buffer.push(">Next ›</a>\n    </span>\n\n    <span class=\"last\">\n      <a href=\"javascript:return false;\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "pageClicked", "pageItems.lastObject.page", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
      data.buffer.push(">Last »</a>\n    </span>\n  ");
      return buffer;
      }

      data.buffer.push("<nav class=\"pagination\">\n  ");
      stack1 = helpers['if'].call(depth0, "canStepBackward", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n\n  ");
      stack1 = helpers.each.call(depth0, "item", "in", "pageItems", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n\n  ");
      stack1 = helpers['if'].call(depth0, "canStepForward", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n\n</nav>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/components/taxonomy-breadcrumbs", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;

    function program1(depth0,data) {
      
      
      data.buffer.push("Home");
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program5(depth0,data) {
      
      
      data.buffer.push("Products");
      }

    function program7(depth0,data) {
      
      var buffer = '', stack1, helper, options;
      data.buffer.push("<li>");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(8, program8, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("&nbsp;»&nbsp;</li>");
      return buffer;
      }
    function program8(depth0,data) {
      
      var stack1;
      stack1 = helpers._triageMustache.call(depth0, "item.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }

      data.buffer.push("<nav id=\"breadcrumbs\" class=\"sixteen columns\"><ul class=\"inline\"><li>");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("&nbsp;»&nbsp;</li><li>");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("&nbsp;»&nbsp;</li>");
      stack1 = helpers.each.call(depth0, "item", "in", "taxonBreadcrumbs", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(7, program7, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</ul></nav>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/components/taxons-tree", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, self=this, helperMissing=helpers.helperMissing;

    function program1(depth0,data) {
      
      var buffer = '', stack1, helper, options;
      data.buffer.push("<li>");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0,depth0],types:["STRING","ID"],data:data},helper ? helper.call(depth0, "taxons.show", "taxon", options) : helperMissing.call(depth0, "link-to", "taxons.show", "taxon", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</li>");
      return buffer;
      }
    function program2(depth0,data) {
      
      var stack1;
      stack1 = helpers._triageMustache.call(depth0, "taxon.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }

    function program4(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

      data.buffer.push("<ul class=\"taxons-list\">");
      stack1 = helpers.each.call(depth0, "taxon", "in", "taxonomy.taxonsExcludingRoot", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</ul>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/flash-outlet", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var stack1, self=this;

    function program1(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("\n  ");
      stack1 = helpers._triageMustache.call(depth0, "view.currentMessage.message", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n");
      return buffer;
      }

      stack1 = helpers['if'].call(depth0, "view.currentMessage", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      
    });
  });
define("ember-cli-spree-frontend/templates/index", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var helper, options;
      data.buffer.push(escapeExpression((helper = helpers['individual-product'] || (depth0 && depth0['individual-product']),options={hash:{
        'product': ("product"),
        'cycleIndex': ("index")
      },hashTypes:{'product': "ID",'cycleIndex': "ID"},hashContexts:{'product': depth0,'cycleIndex': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "individual-product", options))));
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

      data.buffer.push("<div data-hook=\"homepage_products\"><ul id=\"products\" class=\"inline product-listing\">");
      stack1 = (helper = helpers.eachIndexed || (depth0 && depth0.eachIndexed),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data},helper ? helper.call(depth0, "product", "in", "model", options) : helperMissing.call(depth0, "eachIndexed", "product", "in", "model", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</ul>");
      data.buffer.push(escapeExpression((helper = helpers['page-numbers'] || (depth0 && depth0['page-numbers']),options={hash:{
        'content': ("content")
      },hashTypes:{'content': "ID"},hashContexts:{'content': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "page-numbers", options))));
      data.buffer.push("</div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/products/-cart-form", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


      data.buffer.push("<h6>variant information here</h6><div class=\"add-to-cart\">");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'class': ("title"),
        'id': ("quantity"),
        'min': (1),
        'name': ("quantity"),
        'type': ("number"),
        'value': ("quantity")
      },hashTypes:{'class': "STRING",'id': "STRING",'min': "INTEGER",'name': "STRING",'type': "STRING",'value': "ID"},hashContexts:{'class': depth0,'id': depth0,'min': depth0,'name': depth0,'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("<button id=\"add-to-cart-button\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "addToCart", "model", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
      data.buffer.push(" type=\"submit\" class=\"large primary\">Add to Cart</button></div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/products/show", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

    function program1(depth0,data) {
      
      var stack1;
      stack1 = helpers._triageMustache.call(depth0, "model.description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }

    function program3(depth0,data) {
      
      
      data.buffer.push("This product has no description");
      }

      data.buffer.push("<div data-hook=\"product_show\" itemtype=\"http://schema.org/Product\"><div data-hook=\"product_left_part\" class=\"columns six alpha\"><div data-hook=\"product_left_part_wrap\" class=\"row\"><div id=\"product-images\" data-hook=\"product_images\"><div id=\"main-image\"><img src=\"");
      data.buffer.push(escapeExpression(helpers.unbound.call(depth0, "spree-host", "model.images.firstObject.productUrl", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["ID","ID"],data:data})));
      data.buffer.push("\" /></div><div id=\"thumbnails\"><h6>thumbnails partial here</h6></div><div data-hook=\"product_properties\"><h6>product properties partial here</h6></div><div data-hook=\"promotions\"><h6>promotions partial here</h6></div></div></div></div><div data-hook=\"product_right_part\" class=\"columns ten omega\"><div data-hook=\"product_right_part_wrap\" class=\"row\"><div id=\"product-description\" data-hook=\"product_description\"><h1 itemprop=\"name\" class=\"product-title\">");
      stack1 = helpers._triageMustache.call(depth0, "model.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</h1><div itemprop=\"description\" data-hook=\"description\">");
      stack1 = helpers['if'].call(depth0, "model.description", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div><div id=\"cart-form\" data-hook=\"cart_form\">");
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "products/cart-form", options) : helperMissing.call(depth0, "partial", "products/cart-form", options))));
      data.buffer.push("</div><h6>taxons partial here</h6>");
      stack1 = helpers._triageMustache.call(depth0, "spree.currentOrder", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div></div></div></div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/shared/-account-links", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var stack1, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

    function program1(depth0,data) {
      
      var buffer = '', stack1, helper, options;
      data.buffer.push("<li>");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "users.show", options) : helperMissing.call(depth0, "link-to", "users.show", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</li><li><a ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "invalidateSession", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(" href=\"\">Logout</a></li>");
      return buffer;
      }
    function program2(depth0,data) {
      
      
      data.buffer.push("My Account");
      }

    function program4(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program6(depth0,data) {
      
      var buffer = '', stack1, helper, options;
      data.buffer.push("<li>");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "users.login", options) : helperMissing.call(depth0, "link-to", "users.login", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</li>");
      return buffer;
      }
    function program7(depth0,data) {
      
      
      data.buffer.push("Login");
      }

      stack1 = helpers['if'].call(depth0, "session.isAuthenticated", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      
    });
  });
define("ember-cli-spree-frontend/templates/shared/-footer", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      


      data.buffer.push("<footer id=\"footer\" class=\"sixteen columns\"><div id=\"footer-left\" class=\"columns alpha eight\"><p>Powered by&nbsp;<a href=\"http://spreecommerce.com/\">Spree</a></p></div><div id=\"footer-right\" class=\"columns omega eight\"></div></footer>");
      
    });
  });
define("ember-cli-spree-frontend/templates/shared/-header", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

    function program1(depth0,data) {
      
      
      data.buffer.push("<img alt=\"Spree 50\" src=\"images/logo/spree_50.png\" />");
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

      data.buffer.push("<header id=\"header\" class=\"row\"><figure id=\"logo\" class=\"columns six\">");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</figure>");
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "shared/nav-bar", options) : helperMissing.call(depth0, "partial", "shared/nav-bar", options))));
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "shared/main-nav-bar", options) : helperMissing.call(depth0, "partial", "shared/main-nav-bar", options))));
      data.buffer.push("</header>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/shared/-main-nav-bar", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;

    function program1(depth0,data) {
      
      
      data.buffer.push("Home");
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

    function program5(depth0,data) {
      
      var stack1;
      stack1 = helpers['if'].call(depth0, "spree.currentOrder.empty", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(9, program9, data),fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }
    function program6(depth0,data) {
      
      var stack1, helper, options;
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
        'class': ("cart-info empty")
      },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.program(3, program3, data),fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "cart", options) : helperMissing.call(depth0, "link-to", "cart", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }
    function program7(depth0,data) {
      
      
      data.buffer.push("Cart: (Empty)");
      }

    function program9(depth0,data) {
      
      var stack1, helper, options;
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
        'class': ("cart-info full")
      },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.program(3, program3, data),fn:self.program(10, program10, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "cart", options) : helperMissing.call(depth0, "link-to", "cart", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      }
    function program10(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("Cart: (");
      stack1 = helpers._triageMustache.call(depth0, "spree.currentOrder.itemCount", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push(") &nbsp;<span class=\"amount\">$");
      stack1 = helpers._triageMustache.call(depth0, "spree.currentOrder.total", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</span>");
      return buffer;
      }

      data.buffer.push("<nav class=\"columns sixteen\"><ul id=\"main-nav-bar\" class=\"inline\"><li id=\"home-link\">");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</li><li id=\"link-to-cart\">");
      stack1 = helpers['if'].call(depth0, "spree.currentOrder", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</li></ul></nav>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/shared/-nav-bar", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


      data.buffer.push("<nav id=\"top-nav-bar\" class=\"columns ten\"><ul id=\"nav-bar\" class=\"inline\">");
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "shared/account-links", options) : helperMissing.call(depth0, "partial", "shared/account-links", options))));
      data.buffer.push("<li id=\"search-bar\">");
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "shared/search", options) : helperMissing.call(depth0, "partial", "shared/search", options))));
      data.buffer.push("</li></ul></nav>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/shared/-search", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


      data.buffer.push("<form>");
      data.buffer.push(escapeExpression(helpers.view.call(depth0, "select", {hash:{
        'aria-label': ("Taxon"),
        'id': ("taxon"),
        'name': ("taxon"),
        'content': ("taxonomies"),
        'optionLabelPath': ("content.name"),
        'prompt': ("All departments")
      },hashTypes:{'aria-label': "STRING",'id': "STRING",'name': "STRING",'content': "ID",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'aria-label': depth0,'id': depth0,'name': depth0,'content': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'id': ("keywords"),
        'name': ("keywords"),
        'placeholder': ("Search"),
        'type': ("search")
      },hashTypes:{'id': "STRING",'name': "STRING",'placeholder': "STRING",'type': "STRING"},hashContexts:{'id': depth0,'name': depth0,'placeholder': depth0,'type': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'type': ("submit"),
        'value': ("Search")
      },hashTypes:{'type': "STRING",'value': "STRING"},hashContexts:{'type': depth0,'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</form>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/shared/-taxonomies", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = '', stack1, helper, options;
      data.buffer.push("<h6 class=\"taxonomy-root\">Shop by ");
      stack1 = helpers._triageMustache.call(depth0, "taxonomy.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</h6>");
      data.buffer.push(escapeExpression((helper = helpers['taxons-tree'] || (depth0 && depth0['taxons-tree']),options={hash:{
        'taxonomy': ("taxonomy")
      },hashTypes:{'taxonomy': "ID"},hashContexts:{'taxonomy': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "taxons-tree", options))));
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

      data.buffer.push("<nav id=\"taxonomies\" class=\"sidebar-item\">");
      stack1 = helpers.each.call(depth0, "taxonomy", "in", "taxonomies", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</nav>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/taxonomies", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var stack1;


      stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      
    });
  });
define("ember-cli-spree-frontend/templates/taxonomies/show", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var stack1;


      stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      
    });
  });
define("ember-cli-spree-frontend/templates/taxons", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1;


      stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/taxons/show", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1;


      stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/users/login", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

    function program1(depth0,data) {
      
      
      data.buffer.push("Create a new account");
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

      data.buffer.push("<div id=\"existing-customer\"><h6>Login as Existing Customer</h6><div><form id=\"new_spree_user\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "authenticate", {hash:{
        'on': ("submit")
      },hashTypes:{'on': "STRING"},hashContexts:{'on': depth0},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(" accept-charset=\"UTF-8\" method=\"post\" class=\"new_spree_user\"><div id=\"password-credentials\"><p><label for=\"spree_user_emal\">Email</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'value': ("identification"),
        'type': ("email"),
        'class': ("test-email")
      },hashTypes:{'value': "ID",'type': "STRING",'class': "STRING"},hashContexts:{'value': depth0,'type': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p><label for=\"spree_user_password\">Password</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'value': ("password"),
        'type': ("password"),
        'class': ("test-password")
      },hashTypes:{'value': "ID",'type': "STRING",'class': "STRING"},hashContexts:{'value': depth0,'type': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p><button type=\"submit\" class=\"button primary\">Login</button></p>or");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "users.new", options) : helperMissing.call(depth0, "link-to", "users.new", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div></form></div></div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/users/new", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

    function program1(depth0,data) {
      
      
      data.buffer.push("Login as Existing Customer");
      }

    function program3(depth0,data) {
      
      var buffer = '';
      return buffer;
      }

      data.buffer.push("<div id=\"new-customer\"><h6>New Customer</h6><div><form id=\"new_spree_user\" ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "createUser", "", {hash:{
        'on': ("submit")
      },hashTypes:{'on': "STRING"},hashContexts:{'on': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
      data.buffer.push(" accept-charset=\"UTF-8\" method=\"post\" class=\"new_spree_user\"><div id=\"password-credentials\"><p><label for=\"spree_user_emal\">Email</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'value': ("model.email"),
        'type': ("email"),
        'class': ("test-email")
      },hashTypes:{'value': "ID",'type': "STRING",'class': "STRING"},hashContexts:{'value': depth0,'type': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p><label for=\"spree_user_password\">Password</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'value': ("model.password"),
        'type': ("password"),
        'class': ("test-password")
      },hashTypes:{'value': "ID",'type': "STRING",'class': "STRING"},hashContexts:{'value': depth0,'type': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p><label for=\"spree_user_password_confirmation\">Password Confirmation</label><br />");
      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
        'value': ("model.passwordConfirmation"),
        'type': ("password"),
        'class': ("test-password-confirmation")
      },hashTypes:{'value': "ID",'type': "STRING",'class': "STRING"},hashContexts:{'value': depth0,'type': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
      data.buffer.push("</p><p><button type=\"submit\" class=\"button primary\">Create</button></p>or");
      stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "users.login", options) : helperMissing.call(depth0, "link-to", "users.login", options));
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("</div></form></div></div>");
      return buffer;
      
    });
  });
define("ember-cli-spree-frontend/templates/users/show", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var stack1;


      stack1 = helpers._triageMustache.call(depth0, "session.currentUser.email", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      else { data.buffer.push(''); }
      
    });
  });
define("ember-cli-spree-frontend/tests/app.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - .');
    test('app.js should pass jshint', function() { 
      ok(true, 'app.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/components/individual-product.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - components');
    test('components/individual-product.js should pass jshint', function() { 
      ok(false, 'components/individual-product.js should pass jshint.\ncomponents/individual-product.js: line 2, col 75, Missing semicolon.\n\n1 error'); 
    });
  });
define("ember-cli-spree-frontend/tests/components/line-item.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - components');
    test('components/line-item.js should pass jshint', function() { 
      ok(false, 'components/line-item.js should pass jshint.\ncomponents/line-item.js: line 2, col 75, Missing semicolon.\n\n1 error'); 
    });
  });
define("ember-cli-spree-frontend/tests/components/taxonomy-breadcrumbs.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - components');
    test('components/taxonomy-breadcrumbs.js should pass jshint', function() { 
      ok(true, 'components/taxonomy-breadcrumbs.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/components/taxons-tree.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - components');
    test('components/taxons-tree.js should pass jshint', function() { 
      ok(true, 'components/taxons-tree.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/controllers/checkout.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - controllers');
    test('controllers/checkout.js should pass jshint', function() { 
      ok(true, 'controllers/checkout.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/controllers/index.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - controllers');
    test('controllers/index.js should pass jshint', function() { 
      ok(true, 'controllers/index.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/helpers/resolver.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/helpers');
    test('ember-cli-spree-frontend/tests/helpers/resolver.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/helpers/resolver.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/helpers/start-app.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/helpers');
    test('ember-cli-spree-frontend/tests/helpers/start-app.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/helpers/start-app.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/integration/authentication-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/integration');
    test('ember-cli-spree-frontend/tests/integration/authentication-test.js should pass jshint', function() { 
      ok(false, 'ember-cli-spree-frontend/tests/integration/authentication-test.js should pass jshint.\nember-cli-spree-frontend/tests/integration/authentication-test.js: line 40, col 18, \'Pretender\' is not defined.\n\n1 error'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/integration/sanity-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/integration');
    test('ember-cli-spree-frontend/tests/integration/sanity-test.js should pass jshint', function() { 
      ok(false, 'ember-cli-spree-frontend/tests/integration/sanity-test.js should pass jshint.\nember-cli-spree-frontend/tests/integration/sanity-test.js: line 12, col 18, \'Pretender\' is not defined.\n\n1 error'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/test-helper.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests');
    test('ember-cli-spree-frontend/tests/test-helper.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/test-helper.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/components/address-form-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/components');
    test('ember-cli-spree-frontend/tests/unit/components/address-form-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/components/address-form-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/components/checkout-progress-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/components');
    test('ember-cli-spree-frontend/tests/unit/components/checkout-progress-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/components/checkout-progress-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/components/individual-product-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/components');
    test('ember-cli-spree-frontend/tests/unit/components/individual-product-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/components/individual-product-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/components/line-item-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/components');
    test('ember-cli-spree-frontend/tests/unit/components/line-item-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/components/line-item-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/components/taxonomy-breadcrumbs-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/components');
    test('ember-cli-spree-frontend/tests/unit/components/taxonomy-breadcrumbs-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/components/taxonomy-breadcrumbs-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/components/taxons-tree-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/components');
    test('ember-cli-spree-frontend/tests/unit/components/taxons-tree-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/components/taxons-tree-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/controllers/checkout-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/controllers');
    test('ember-cli-spree-frontend/tests/unit/controllers/checkout-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/controllers/checkout-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/controllers/index-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/controllers');
    test('ember-cli-spree-frontend/tests/unit/controllers/index-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/controllers/index-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/mixins/cycles-classes-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/mixins');
    test('ember-cli-spree-frontend/tests/unit/mixins/cycles-classes-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/mixins/cycles-classes-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/mixins/route-setup-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/mixins');
    test('ember-cli-spree-frontend/tests/unit/mixins/route-setup-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/mixins/route-setup-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/routes/taxons-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/routes');
    test('ember-cli-spree-frontend/tests/unit/routes/taxons-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/routes/taxons-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/ember-cli-spree-frontend/tests/unit/routes/taxons/show-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-spree-frontend/tests/unit/routes/taxons');
    test('ember-cli-spree-frontend/tests/unit/routes/taxons/show-test.js should pass jshint', function() { 
      ok(true, 'ember-cli-spree-frontend/tests/unit/routes/taxons/show-test.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/helpers/resolver", 
  ["ember/resolver","ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Resolver = __dependency1__["default"];
    var config = __dependency2__["default"];

    var resolver = Resolver.create();

    resolver.namespace = {
      modulePrefix: config.modulePrefix,
      podModulePrefix: config.podModulePrefix
    };

    __exports__["default"] = resolver;
  });
define("ember-cli-spree-frontend/tests/helpers/start-app", 
  ["ember","ember-cli-spree-frontend/app","ember-cli-spree-frontend/router","ember-cli-spree-frontend/config/environment","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var Application = __dependency2__["default"];
    var Router = __dependency3__["default"];
    var config = __dependency4__["default"];

    __exports__["default"] = function startApp(attrs) {
      var application;

      var attributes = Ember.merge({}, config.APP);
      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;

      Ember.run(function() {
        application = Application.create(attributes);
        application.setupForTesting();
        application.injectTestHelpers();
      });

      return application;
    }
  });
define("ember-cli-spree-frontend/tests/integration/authentication-test", 
  ["ember","ember-qunit","ember-cli-spree-frontend/tests/helpers/start-app"],
  function(__dependency1__, __dependency2__, __dependency3__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var test = __dependency2__.test;
    var startApp = __dependency3__["default"];

    var App,
        Server;

    module('Authentication', {
      setup: function() {
        App = startApp();

        var Token = {
          user_id: 1,
          user_email: 'spree-test@example.com',
          user_token: 'test-token'
        };

        var User = {
          id: 14,
          email: 'spree-test@example.com',
          remember_token: null,
          persistence_token: null,
          reset_password_token: null,
          perishable_token: null,
          sign_in_count: 0,
          failed_attempts: 0,
          last_request_at: null,
          current_sign_in_at: null,
          login: 'spree-test@example.com',
          authentication_token: null,
          unlock_token: null,
          locked_at: null,
          reset_password_sent_at: null,
          created_at: '2014-10-16T23:55:10.570Z',
          updated_at: '2014-10-16T23:55:10.570Z',
          spree_api_key: null,
          remember_created_at: null
        };

        Server = new Pretender(function() {
          this.post('/api/ams/users/token', function(request) {
            return [200, { 'Content-Type': 'application/json' }, JSON.stringify(Token)];
          });

          this.post('/api/ams/users', function(request) {
            return [200, { 'Content-Type': 'application/json' }, JSON.stringify({user: User})];
          });
        });

      },
      teardown: function() {
        Ember.run(App, App.destroy);
        Server.shutdown();
      },
    });

    test('Users Can Log In', function() {
      expect(1);

      visit('/users/login');

      fillIn('input.test-email', 'spree-test@example.com');
      fillIn('input.test-password', 'spree567');
      click('button[type="submit"]');

      andThen(function() {
        equal(find('a:contains("Logout")').length, 1, 'The page shows a logout link when the session is authenticated');
      });
    });

    test('Users Can Sign Up', function() {
      expect(1);

      visit('/users/new');

      fillIn('input.test-email', 'spree-test@example.com');
      fillIn('input.test-password', 'spree567');
      fillIn('input.test-password-confirmation', 'spree567');
      click('button[type="submit"]');

      andThen(function() {
        equal(find('a:contains("Logout")').length, 1, 'The page shows');
      });
    });
  });
define("ember-cli-spree-frontend/tests/integration/sanity-test", 
  ["ember","ember-qunit","ember-cli-spree-frontend/tests/helpers/start-app"],
  function(__dependency1__, __dependency2__, __dependency3__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var test = __dependency2__.test;
    var startApp = __dependency3__["default"];

    var App,
        Server;

    module('Sanity Check', {
      setup: function() {
        App = startApp();

        Server = new Pretender(function() {
          this.get('/api/ams/products', function(request) {
            return [200, { 'Content-Type': 'application/json' }, JSON.stringify({products: {}})];
          });
        });


      },
      teardown: function() {
        Ember.run(App, App.destroy);
        Server.shutdown();
      }
    });

    test('Sanity Check', function() {
      visit('/');
      andThen(function() {
        ok(exists('*'), 'Found some HTML');
      });
    });
  });
define("ember-cli-spree-frontend/tests/mixins/cycles-classes.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - mixins');
    test('mixins/cycles-classes.js should pass jshint', function() { 
      ok(true, 'mixins/cycles-classes.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/mixins/route-setup.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - mixins');
    test('mixins/route-setup.js should pass jshint', function() { 
      ok(true, 'mixins/route-setup.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/router.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - .');
    test('router.js should pass jshint', function() { 
      ok(true, 'router.js should pass jshint.'); 
    });
  });
define("ember-cli-spree-frontend/tests/routes/taxons/show.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - routes/taxons');
    test('routes/taxons/show.js should pass jshint', function() { 
      ok(false, 'routes/taxons/show.js should pass jshint.\nroutes/taxons/show.js: line 8, col 68, Missing semicolon.\nroutes/taxons/show.js: line 9, col 5, Forgotten \'debugger\' statement?\nroutes/taxons/show.js: line 9, col 13, Missing semicolon.\nroutes/taxons/show.js: line 8, col 9, \'taxonomy\' is defined but never used.\n\n4 errors'); 
    });
  });
define("ember-cli-spree-frontend/tests/test-helper", 
  ["ember-cli-spree-frontend/tests/helpers/resolver","ember-qunit"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var resolver = __dependency1__["default"];
    var setResolver = __dependency2__.setResolver;

    setResolver(resolver);

    document.write('<div id="ember-testing-container"><div id="ember-testing"></div></div>');

    QUnit.config.urlConfig.push({ id: 'nocontainer', label: 'Hide container'});
    var containerVisibility = QUnit.urlParams.nocontainer ? 'hidden' : 'visible';
    document.getElementById('ember-testing-container').style.visibility = containerVisibility;
  });
define("ember-cli-spree-frontend/tests/unit/components/address-form-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleForComponent = __dependency1__.moduleForComponent;
    var test = __dependency1__.test;

    moduleForComponent('address-form', 'AddressFormComponent', {
      // specify the other units that are required for this test
      // needs: ['component:foo', 'helper:bar']
    });

    test('it renders', function() {
      expect(2);

      // creates the component instance
      var component = this.subject();
      equal(component._state, 'preRender');

      // appends the component to the page
      this.append();
      equal(component._state, 'inDOM');
    });
  });
define("ember-cli-spree-frontend/tests/unit/components/checkout-progress-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleForComponent = __dependency1__.moduleForComponent;
    var test = __dependency1__.test;

    moduleForComponent('checkout-progress', 'CheckoutProgressComponent', {
      // specify the other units that are required for this test
      // needs: ['component:foo', 'helper:bar']
    });

    test('it renders', function() {
      expect(2);

      // creates the component instance
      var component = this.subject();
      equal(component._state, 'preRender');

      // appends the component to the page
      this.append();
      equal(component._state, 'inDOM');
    });
  });
define("ember-cli-spree-frontend/tests/unit/components/individual-product-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleForComponent = __dependency1__.moduleForComponent;
    var test = __dependency1__.test;

    moduleForComponent('individual-product', 'IndividualProductComponent', {
      // specify the other units that are required for this test
      // needs: ['component:foo', 'helper:bar']
    });

    test('it renders', function() {
      expect(2);

      // creates the component instance
      var component = this.subject();
      equal(component._state, 'preRender');

      // appends the component to the page
      this.append();
      equal(component._state, 'inDOM');
    });
  });
define("ember-cli-spree-frontend/tests/unit/components/line-item-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleForComponent = __dependency1__.moduleForComponent;
    var test = __dependency1__.test;

    moduleForComponent('line-item', 'LineItemComponent', {
      // specify the other units that are required for this test
      // needs: ['component:foo', 'helper:bar']
    });

    test('it renders', function() {
      expect(2);

      // creates the component instance
      var component = this.subject();
      equal(component._state, 'preRender');

      // appends the component to the page
      this.append();
      equal(component._state, 'inDOM');
    });
  });
define("ember-cli-spree-frontend/tests/unit/components/taxonomy-breadcrumbs-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleForComponent = __dependency1__.moduleForComponent;
    var test = __dependency1__.test;

    moduleForComponent('taxonomy-breadcrumbs', 'TaxonomyBreadcrumbsComponent', {
      // specify the other units that are required for this test
      // needs: ['component:foo', 'helper:bar']
    });

    test('it renders', function() {
      expect(2);

      // creates the component instance
      var component = this.subject();
      equal(component._state, 'preRender');

      // appends the component to the page
      this.append();
      equal(component._state, 'inDOM');
    });
  });
define("ember-cli-spree-frontend/tests/unit/components/taxons-tree-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleForComponent = __dependency1__.moduleForComponent;
    var test = __dependency1__.test;

    moduleForComponent('taxons-tree', 'TaxonsTreeComponent', {
      // specify the other units that are required for this test
      // needs: ['component:foo', 'helper:bar']
    });

    test('it renders', function() {
      expect(2);

      // creates the component instance
      var component = this.subject();
      equal(component._state, 'preRender');

      // appends the component to the page
      this.append();
      equal(component._state, 'inDOM');
    });
  });
define("ember-cli-spree-frontend/tests/unit/controllers/checkout-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleFor = __dependency1__.moduleFor;
    var test = __dependency1__.test;

    moduleFor('controller:checkout', 'CheckoutController', {
      // Specify the other units that are required for this test.
      // needs: ['controller:foo']
    });

    // Replace this with your real tests.
    test('it exists', function() {
      var controller = this.subject();
      ok(controller);
    });
  });
define("ember-cli-spree-frontend/tests/unit/controllers/index-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleFor = __dependency1__.moduleFor;
    var test = __dependency1__.test;

    moduleFor('controller:index', 'IndexController', {
      // Specify the other units that are required for this test.
      // needs: ['controller:foo']
    });

    // Replace this with your real tests.
    test('it exists', function() {
      var controller = this.subject();
      ok(controller);
    });
  });
define("ember-cli-spree-frontend/tests/unit/mixins/cycles-classes-test", 
  ["ember","ember-cli-spree-frontend/mixins/cycles-classes"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var CyclesClassesMixin = __dependency2__["default"];

    module('CyclesClassesMixin');

    // Replace this with your real tests.
    test('it works', function() {
      var CyclesClassesObject = Ember.Object.extend(CyclesClassesMixin);
      var subject = CyclesClassesObject.create();
      ok(subject);
    });
  });
define("ember-cli-spree-frontend/tests/unit/mixins/route-setup-test", 
  ["ember","ember-cli-spree-frontend/mixins/route-setup"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var RouteSetupMixin = __dependency2__["default"];

    module('RouteSetupMixin');

    // Replace this with your real tests.
    test('it works', function() {
      var RouteSetupObject = Ember.Object.extend(RouteSetupMixin);
      var subject = RouteSetupObject.create();
      ok(subject);
    });
  });
define("ember-cli-spree-frontend/tests/unit/routes/taxons-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleFor = __dependency1__.moduleFor;
    var test = __dependency1__.test;

    moduleFor('route:taxons', 'TaxonsRoute', {
      // Specify the other units that are required for this test.
      // needs: ['controller:foo']
    });

    test('it exists', function() {
      var route = this.subject();
      ok(route);
    });
  });
define("ember-cli-spree-frontend/tests/unit/routes/taxons/show-test", 
  ["ember-qunit"],
  function(__dependency1__) {
    "use strict";
    var moduleFor = __dependency1__.moduleFor;
    var test = __dependency1__.test;

    moduleFor('route:taxons/show', 'TaxonsShowRoute', {
      // Specify the other units that are required for this test.
      // needs: ['controller:foo']
    });

    test('it exists', function() {
      var route = this.subject();
      ok(route);
    });
  });
define("ember-cli-spree-frontend/transforms/array", 
  ["ember-data","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var ArrayTransform;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var DS = __dependency1__["default"];
    ArrayTransform = get$(DS, 'Transform').extend({
      deserialize: function (serialized) {
        if (Ember.isArray(serialized)) {
          return Ember.A(serialized);
        } else {
          return Ember.A;
        }
      },
      serialize: function (deserialized) {
        if (Ember.isArray(deserialized)) {
          return Ember.A(deserialized);
        } else {
          return Ember.A;
        }
      }
    });
    __exports__["default"] = ArrayTransform;
  });
define("ember-cli-spree-frontend/views/flash-outlet", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var FlashView;
    var get$ = Ember.get;
    var set$ = Ember.set;
    FlashView = Ember.View.extend({
      classNames: ['flash-messages'],
      classNameBindings: [
        'type',
        'queueName'
      ],
      type: 'inactive',
      queue: null,
      queueName: null,
      currentMessage: null,
      templateName: 'flash-outlet',
      didInsertElement: function () {
        if (!get$(this, 'queueName'))
          set$(this, 'queueName', get$(get$(this, 'flash'), 'defaultQueueName'));
        return set$(this, 'queue', get$(this, 'flash').findOrCreateQueue(get$(this, 'queueName')));
      },
      click: function () {
        return get$(this, 'queue').dismissFlash();
      },
      queueContentChanged: Ember.observer(function () {
        if (set$(this, 'currentMessage', null != get$(this, 'queue') ? get$(this, 'queue').objectAt(0) : void 0)) {
          return set$(this, 'type', get$(get$(this, 'currentMessage'), 'type'));
        } else {
          return set$(this, 'type', 'inactive');
        }
      }, 'queue.[]')
    });
    __exports__["default"] = FlashView;
  });
/* jshint ignore:start */

define('ember-cli-spree-frontend/config/environment', ['ember'], function(Ember) {
  var prefix = 'ember-cli-spree-frontend';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("ember-cli-spree-frontend/tests/test-helper");
} else {
  require("ember-cli-spree-frontend/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}

/* jshint ignore:end */
//# sourceMappingURL=ember-cli-spree-frontend.map